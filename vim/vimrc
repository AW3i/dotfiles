set nocompatible
set backspace=indent,eol,start
set history=1000
set showcmd
set showmode
set incsearch
set hlsearch
set wrap
set linebreak
set laststatus=2

set smartindent
set tabstop=4
set expandtab
set smarttab
set shiftwidth=4
set shiftround
set matchpairs+=<:>

set foldmethod=indent
set foldnestmax=0

set scrolloff=10
set sidescrolloff=7
set sidescroll=1

syntax on
set showmatch
set hidden
set noautowrite
set autoread
set more
set ruler
set ttyfast
set noshowmode
set nostartofline
set wildmenu
set lazyredraw
set shell=zsh
set number
set relativenumber
set iskeyword+=_,$,@,%,#
set splitbelow
set splitright
set undolevels=500
set timeout timeoutlen=1000 ttimeoutlen=100
set list listchars=tab:»·,trail:·,extends:»,precedes:«
set encoding=utf-8
scriptencoding utf-8
set complete+=i,kspell
set omnifunc=syntaxcomplete#Complete
set wildignore+=*.bmp,*.gif,*.jpg,*.png,*.ico
set wildignore+=*.swp,*.tmp
set spelllang=de
set nrformats=
set grepprg=ag\ --nogroup\ --nocolor
let &showbreak='↪ '
let mapleader = " "
let maplocalleader = "\\"
let g:netrw_liststyle=0
let g:netrw_browse_split = 4
let g:netrw_altv = 1
set background=dark
set cursorline

colorscheme despacio

filetype plugin indent  on
filetype off

" Auto Installs vim-plugged if it doesn't exist
if empty(glob('~/.config/nvim/autoload/plug.vim'))
    silent !curl -fLo ~/.nvim/autoload/plug.vim --create-dirs
        \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    autocmd VimEnter * PlugInstall
endif

call plug#begin('~/.config/nvim/plugged')

" Text Manipulation
Plug 'Raimondi/delimitMate'
    let delimitMate_jump_expansion = 1
    let delimitMate_expand_cr = 2
    let delimitMate_expand_space = 1
Plug 'junegunn/vim-easy-align'
    xmap ga <Plug>(EasyAlign)
    nmap ga <Plug>(EasyAlign)
Plug 'tpope/vim-surround'
Plug 'tpope/vim-repeat'
Plug 'scrooloose/nerdcommenter'
Plug 'tpope/vim-abolish'
Plug 'terryma/vim-multiple-cursors'

" Completion
Plug 'SirVer/UltiSnips'
    let g:UltiSnipsExpandTrigger = "<tab>"
    let g:UltiSnipsJumpForwardTrigger = "<tab>"
    let g:UltiSnipsJumpBackwardTrigger = "<s-tab>"
    let g:UltiSnipsUsePythonVersion = 3
    let g:UltiSnipsEditSplit="vertical"
    let g:UltiSnipsSnippetDirectories=["UltiSnips"]
Plug 'Shougo/deoplete.nvim'
    let g:deoplete#enable_at_startup = 1
    let g:deoplete#tag#cache_limit_size = 50000000
Plug 'zchee/deoplete-go', {'do': 'make', 'for': 'go'}
Plug 'pbogut/deoplete-padawan'
Plug 'c9s/perlomni.vim', {'for': 'perl'}
Plug 'ervandew/supertab'
    let g:SuperTabDefaultCompletionType = '<tab>'
Plug 'honza/vim-snippets'

" Utility
Plug 'bronson/vim-visual-star-search'
Plug 'diepm/vim-rest-console'
Plug 'tpope/vim-vinegar'
Plug 'janko-m/vim-test'
    let test#strategy = "neoterm"
    nmap <silent> <leader>rT :TestNearest<CR>
    nmap <silent> <leader>rt :TestFile<CR>
    nmap <silent> <leader>ra :TestSuite<CR>
    nmap <silent> <leader>rl :TestLast<CR>
    nmap <silent> <leader>rg :TestVisit<CR>
Plug 'mbbill/undotree', {'on': 'UndotreeToggle'}
Plug 'tpope/vim-unimpaired'
Plug 'majutsushi/tagbar'
Plug 'mattn/emmet-vim'
Plug 'ap/vim-css-color'
Plug 'jceb/vim-orgmode'
Plug 'tpope/vim-speeddating'
Plug 'tpope/vim-eunuch'
Plug 'vim-scripts/utl.vim'
Plug 'kshenoy/vim-signature'
Plug 'ryanss/vim-hackernews'
Plug 'joonty/vdebug'
Plug 'mattn/calendar-vim'
Plug 'Valloric/ListToggle'
Plug 'benekastah/neomake'
    autocmd! BufWritePost * Neomake
    let g:neomake_open_list = 2
    let g:neomake_airline = 1
    let g:neomake_error_sign = { 'text': '✘', 'texthl': 'ErrorSign' }
    let g:neomake_warning_sign = { 'text': ':(', 'texthl': 'WarningSign' }
    let g:neomake_php_phpcs_args_standard = 'PSR2'
    let g:neomake_php_phpmd_maker = {
    \ 'args': ['%:p', 'text', '~/.phpmd.xml'],
    \ 'errorformat': '%E%f:%l%\s%m'
    \ }
    "let g:neomake_php_enabled_makers = ['php', 'phpcs']
    let g:neomake_php_enabled_makers = ['php']
    map <F4> :lopen<CR>
    map <F5> :Neomake<CR>
Plug 'justinmk/vim-sneak'
    let g:sneak#streak = 1
    "replace 'f' with 1-char Sneak
    nmap f <Plug>Sneak_f
    nmap F <Plug>Sneak_F
    xmap f <Plug>Sneak_f
    xmap F <Plug>Sneak_F
    omap f <Plug>Sneak_f
    omap F <Plug>Sneak_F
    "replace 't' with 1-char Sneak
    nmap t <Plug>Sneak_t
    nmap T <Plug>Sneak_T
    xmap t <Plug>Sneak_t
    xmap T <Plug>Sneak_T
    omap t <Plug>Sneak_t
    omap T <Plug>Sneak_T
Plug 'justinmk/vim-dirvish'
Plug 'Valloric/MatchTagAlways'
    let g:mta_filetypes = {
    \ 'html' : 1,
    \ 'dhtml' : 1,
    \ 'xhtml' : 1,
    \ 'xml' : 1,
    \ 'phtml' : 1,
    \}
Plug 'ludovicchabant/vim-gutentags'
    let g:gutentags_exclude = [
    \ '*.min.js',
    \ '*html*',
    \ 'jquery*.js',
    \ '*/node_modules/*',
    \ '*/migrate/*.rb'
    \ ]
    let g:gutentags_cache_dir = '/home/alex/.tags'
    let g:gutentags_ctags_executable_php = 'phpctags --recurse=yes'
Plug 'junegunn/vim-peekaboo'
    let g:peekaboo_delay = 400
Plug 'kassio/neoterm'
    let g:neoterm_position = 'horizontal'
    let g:neoterm_size = '15'

    " clear terminal
    nnoremap <silent> <leader>tl :call neoterm#clear()<cr>
    " kills the current job (send a <c-c>)
    nnoremap <silent> <leader>tc :call neoterm#kill()<cr>
    " toggle terminal
    nnoremap <leader>tt :Ttoggle<CR>
    nnoremap <leader>tr :T 
" File Navigation
Plug 'zenbro/mirror.vim'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
    let g:fzf_nvim_statusline = 0 " disable statusline overwriting

    nnoremap <silent> <leader><space> :Files<CR>
    nnoremap <silent> <leader>a :Buffers<CR>
    nnoremap <silent> <leader>; :BLines<CR>
    nnoremap <silent> <leader>. :Lines<CR>
    nnoremap <silent> <leader>o :BTags<CR>
    nnoremap <silent> <leader>O :Tags<CR>
    nnoremap <silent> <leader>? :History<CR>
    nnoremap <silent> <leader>/ :execute 'Ag ' . input('Ag/')<CR>
    "nnoremap <silent> K :call SearchWordWithAg()<CR>
    "vnoremap <silent> K :call SearchVisualSelectionWithAg()<CR>
    nnoremap <silent> <leader>gl :Commits<CR>
    nnoremap <silent> <leader>ga :BCommits<CR>
    nnoremap <silent> <leader>w :Windows<CR>
    inoremap <silent> <C-s> <ESC>:Snippets<CR>

    imap <C-x><C-f> <plug>(fzf-complete-file-ag)
    imap <C-x><C-l> <plug>(fzf-complete-line)

    let g:fzf_files_options =
      \ '--preview "(coderay {} ) 2> /dev/null | head -'.&lines.'"'

    function! SearchWordWithAg()
        execute 'Ag' expand('<cword>')
    endfunction

    function! SearchVisualSelectionWithAg() range
        let old_reg = getreg('"')
        let old_regtype = getregtype('"')
        let old_clipboard = &clipboard
        set clipboard&
        normal! ""gvy
        let selection = getreg('"')
        call setreg('"', old_reg, old_regtype)
        let &clipboard = old_clipboard
        execute 'Ag' selection
    endfunction

    function! s:ag_to_qf(line)
        let parts = split(a:line, ':')
        return {'filename': parts[0], 'lnum': parts[1], 'col': parts[2],
        \ 'text': join(parts[3:], ':')}
    endfunction

    function! s:ag_handler(lines)
        if len(a:lines) < 2 | return | endif

        let cmd = get({'ctrl-x': 'split',
        \ 'ctrl-v': 'vertical split',
        \ 'ctrl-t': 'tabe'}, a:lines[0], 'e')
        let list = map(a:lines[1:], 's:ag_to_qf(v:val)')

        let first = list[0]
        execute cmd escape(first.filename, ' %#\')
        execute first.lnum
        execute 'normal!' first.col.'|zz'

        if len(list) > 1
            call setqflist(list)
            copen
        wincmd p endif
    endfunction

    command! -nargs=* Ag call fzf#run({
    \ 'source':  printf('ag --nogroup --column --color "%s"',
    \                   escape(empty(<q-args>) ? '^(?=.)' : <q-args>, '"\')),
    \ 'sink*':    function('<sid>ag_handler'),
    \ 'options': "--ansi --expect=ctrl-t,ctrl-v,ctrl-x --delimiter : --nth 4.. "
    \ })

" Appearance
Plug 'junegunn/goyo.vim'
    nnoremap <silent> gy :Goyo<CR>
Plug 'nanotech/jellybeans.vim'
    let g:jellybeans_background_color_256=234
Plug 'mhinz/vim-startify'
    let g:startify_session_dir = '~/.config/nvim/session'
    let g:startify_bookmarks = [ {'v': '~/.vimrc'}, {'o': '~/ownCloud/shared/org/index.org'}]
    let g:startify_list_order = [
                \ ['Sessions:'],
                \ 'sessions',
                \ ['Bookmarks:'],
                \ 'bookmarks',
                \ ['Files:'],
                \ 'files',
                \ ['Dir:'],
                \ 'dir'
                \ ]
    let g:startify_session_persistence = 1
    let g:startify_session_delete_buffers = 1
    let g:startify_change_to_dir = 1
    let g:startify_change_to_vcs_root = 1
    let g:startify_custom_header = map(split(system('fortune | cowsay'), '\n'), '"   ". v:val') + ['','']
    let g:startify_session_before_save = [
        \ 'echo "Cleaning up before saving.."',
        \ 'call CleanEmptyBuffers()',
        \ ]
    nnoremap <F12> :Startify<CR>
    autocmd! User Startified setlocal colorcolumn=0
Plug 'junegunn/limelight.vim'
    let g:limelight_default_coefficient = 0.7
    let g:limelight_conceal_ctermfg = 238
    nmap <silent> gl :Limelight!!<CR>
    xmap gl <Plug>(Limelight)

Plug 'vim-airline/vim-airline-themes'
Plug 'vim-airline/vim-airline'
    let g:airline_theme='zenburn'
    "let g:airline_left_sep  = '▓▒░'
    "let g:airline_right_sep = '░▒▓'
    "let g:airline_section_z = '%2p%% %2l/%L:%2v'
    " airline symbols
    if !exists('g:airline_symbols')
        let g:airline_symbols = {}
    endif
    let g:airline_left_sep = ''
    let g:airline_left_alt_sep = ''
    let g:airline_right_sep = ''
    let g:airline_right_alt_sep = ''
    let g:airline_symbols.branch = ''
    let g:airline_symbols.readonly = ''
    let g:airline_symbols.linenr = ''


    " Tabline
    let g:airline#extensions#tabline#enabled = 1
    let g:airline#extensions#tabline#show_close_button = 0
    let g:airline#extensions#tabline#show_buffers = 1
    let g:airline#extensions#tabline#show_splits = 0
    let g:airline#extensions#tabline#excludes = []
    let g:airline#extensions#tabline#exclude_preview = 0
    nmap <M-1> <Plug>AirlineSelectTab1
    nmap <M-2> <Plug>AirlineSelectTab2
    nmap <M-3> <Plug>AirlineSelectTab3
    nmap <M-4> <Plug>AirlineSelectTab4
    nmap <M-5> <Plug>AirlineSelectTab5
    nmap <M-6> <Plug>AirlineSelectTab6
    nmap <M-7> <Plug>AirlineSelectTab7
    nmap <M-8> <Plug>AirlineSelectTab8
    nmap <M-9> <Plug>AirlineSelectTab9

" VCS
"Plug 'jreybert/vimagit'
    "nmap <leader>m :call magit#show_magit('h')<CR>
Plug 'tpope/vim-fugitive'
    nmap <leader>ga :Gwrite<CR>
    nmap <leader>gs :Gstatus<CR>
    nmap <leader>gt :Gcommit -v -q %:p<CR>
    nmap <leader>gd :Gdiff<CR>
    nmap <leader>gc :Gcommit -v -q<CR>
    nmap <leader>gb :Git branch<Space>
    nmap <leader>go :Git checkout<Space>
Plug 'idanarye/vim-merginal'
Plug 'mhinz/vim-signify'

" Languages
Plug 'elixir-lang/vim-elixir'
Plug 'fatih/vim-go', {'for': 'go'}
Plug 'phpvim/phpfold.vim', { 'for': 'php', 'do': 'composer update' }
Plug 'arnaud-lb/vim-php-namespace', {'for': 'php'}
    function! IPhpInsertUse()
        call PhpInsertUse()
        call feedkeys('a',  'n')
    endfunction
    autocmd FileType php noremap <Leader>u :call PhpInsertUse()<CR>

    function! IPhpExpandClass()
        call PhpExpandClass()
        call feedkeys('a', 'n')
    endfunction
    autocmd FileType php noremap <Leader>e :call PhpExpandClass()<CR>
Plug '2072/PHP-Indenting-for-VIm', {'for': 'php'}
Plug 'StanAngeloff/php.vim', {'for': 'php'}
    function! PhpSyntaxOverride()
        hi! def link phpDocTags phpDefine
        hi! def link phpDocParam phpType
    endfunction

    augroup phpSyntaxOverride
        autocmd!
        autocmd FileType php call PhpSyntaxOverride()
    augroup END
Plug 'tobyS/vmustache', {'for': 'php'}
Plug 'tobyS/pdv', {'for': 'php'}
    let g:pdv_template_dir = $HOME . "/Documents/git/dotfiles/vim/plugged/pdv/templates_snip"
    nnoremap <C-p> :call pdv#DocumentWithSnip()<CR>
Plug 'vim-php/tagbar-phpctags.vim'
Plug 'adoy/vim-php-refactoring-toolbox'
Plug 'arakashic/chromatica.nvim'
    let g:chromatica#highlight_feature_level = 1
    let g:chromatica#libclang_path = '/usr/lib64'
    let g:chromatica#responsive_mode=1
call plug#end()

"Highlight in red when a line has more than 81 characters
highlight ColorColumn ctermbg=red
call matchadd('ColorColumn', '\%81v', 100)

autocmd FileType mail set spell

highlight! ErrorSign guifg=black guibg=#E01600 ctermfg=16 ctermbg=160
highlight! WarningSign guifg=black guibg=#FFED26 ctermfg=16 ctermbg=11

nnoremap <leader>s :w<CR>

nnoremap <silent> <leader>h :nohls<CR>

nnoremap <silent> <F1>  :UndotreeToggle<CR>
nnoremap <silent> <F2>  :TagbarOpenAutoClose<CR>
nnoremap <silent> <F3>  :25Lexplore<CR>

nmap <silent> <leader>tn :tabnew<CR>
nnoremap <silent> <C-k> :wincmd k<CR>
nnoremap <silent> <C-j> :wincmd j<CR>
nnoremap <silent> <C-l> :wincmd l<CR>
nnoremap <silent> <C-h> :wincmd h<CR>
nnoremap  <silent> <leader>bc :bp<bar>sp<bar>bn<bar>bd<CR>
nnoremap <silent>  <leader>bd :bd<CR>
" Switch back to normal mode from terminal mode
tnoremap <esc><esc> <C-\><C-n>
"
" Keep search results at the center of screen
nmap n nzz
nmap N Nzz
nmap * *zz
nmap # #zz
nmap g* g*zz
nmap g# g#zz

" Use a blinking upright bar cursor in Insert mode, a solid block in normal
" and a blinking underline in replace mode
let $NVIM_TUI_ENABLE_CURSOR_SHAPE=1
let &t_SI = "\<Esc>[5 q"
let &t_SR = "\<Esc>[3 q"
let &t_EI = "\<Esc>[2 q"

function! CleanEmptyBuffers()
  let buffers = filter(range(0, bufnr('$')), 'buflisted(v:val) && empty(bufname(v:val)) && bufwinnr(v:val)<0')
  if !empty(buffers)
    exe 'bw '.join(buffers, ' ')
  endif
endfunction
"hi ColorColumn ctermbg=124
hi SneakPluginTarget guifg=black guibg=red ctermfg=black ctermbg=red
hi SneakPluginScope  guifg=black guibg=yellow ctermfg=black ctermbg=yellow
hi SneakStreakTarget guifg=black guibg=red ctermfg=black ctermbg=blue
hi SneakStreakMask  guifg=black guibg=yellow ctermfg=blue ctermbg=blue


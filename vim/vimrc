let vimpath = '$HOME/.vim/'
if has('nvim')
    let vimpath = '$HOME/.config/nvim/'
endif

" Auto Installs vim-plugged if it doesn't exist
if empty(glob(vimpath . 'autoload/plug.vim'))
    exec 'silent' '!' 'curl -fLo' . vimpath . 'autoload/plug.vim --create-dirs  https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
    silent !curl -fLo vimpath . 'autoload/plug.vim' --create-dirs
    autocmd VimEnter * PlugInstall
endif
set exrc
set pumblend=20
set backspace=indent,eol,start
set history=1000
set showcmd
set incsearch
set hlsearch
set wrap
set linebreak
set laststatus=2

set tabstop=4
set expandtab
set smarttab
set shiftwidth=4
set shiftround
set matchpairs+=<:>

set scrolloff=10
set sidescrolloff=7
set sidescroll=1

syntax on
set showmatch
set hidden
set noautowrite
set more
set noshowmode
set nostartofline
set wildmenu
set lazyredraw
set shell=zsh
set iskeyword+=_,$,@,%,#
set splitbelow
set splitright
set undolevels=500
if has("persistent_undo")
    set undofile
endif
set timeout timeoutlen=1000 ttimeoutlen=100
set list listchars=tab:»·,trail:·,extends:»,precedes:«
set encoding=utf-8
scriptencoding utf-8
set complete+=i,kspell
" set completeopt-=preview
" 
" Avoid showing message extra message when using completion
set shortmess+=c
set completeopt=menuone,noinsert,noselect
" set spellang=en_gb,de_de
set wildignore+=*.bmp,*.gif,*.jpg,*.png,*.ico
set wildignore+=*.swp,*.tmp,*.zip,*.exe,*.so,*.o
" TODO Doesn't work find alternative
set wildignore+=*/node_modules/*
" if executable('rg')
"     " TODO Sometimes rg exits randomly check that
"     set grepprg=rg\ --vimgrep\ --no-ignore\ --no-heading\ --smart-case
" endif

let &showbreak='↪ '
let mapleader = " "
let maplocalleader = "\\"
set title
set equalalways
if exists('&inccommand')
  set inccommand=split
endif
set foldmethod=syntax
set foldlevel=1
set viewoptions=cursor,folds,slash,unix
set conceallevel=2
set nomodeline
set tags=tags
filetype plugin indent  on
filetype off

highlight! ErrorSign guifg=black guibg=#E01600 ctermfg=16 ctermbg=160
highlight! WarningSign guifg=black guibg=#FFED26 ctermfg=16 ctermbg=11

" Use a blinking upright bar cursor in Insert mode, a solid block in normal
" and a blinking underline in replace mode
set guicursor=n-v-c:block-Cursor/lCursor-blinkon0,i-ci:ver25-Cursor/lCursor,r-cr:hor20-Cursor/lCursor
"enable mouse support
set mouse=a

call plug#begin(vimpath. 'plugged')
Plug 'tmsvg/pear-tree'
    let g:pear_tree_ft_disabled = ['c', 'python', 'markdown']
    " let g:pear_tree_pairs = {
    "   \ '<*>': { 'closer': '</*>',
    "   \          'not_if': ['br', 'hr', 'img', 'input', 'link', 'meta',
    "   \                  'area', 'base', 'col', 'command', 'embed',
    "   \                  'keygen', 'param', 'source', 'track', 'wbr'],
    "   \          'not_like': '{[^}]*$\|/$',
    "   \          'until': '[^a-zA-Z0-9-._]',
    "   \          'not_at': ['[^> ]<[^>]*'],
    "   \          'not_in': ['String']
    "   \        }
    "   \ }
Plug 'tommcdo/vim-exchange'
Plug 'rhysd/vim-grammarous'
Plug 'tommcdo/vim-lion'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-repeat'
Plug 'tomtom/tcomment_vim'
    let  g:tcomment#filetype#guess_php = 'php'
Plug 'tpope/vim-abolish'
if has('python')
    Plug 'SirVer/UltiSnips' | Plug 'honza/vim-snippets'
        let g:UltiSnipsExpandTrigger = "<tab>"
        let g:UltiSnipsJumpForwardTrigger = "<tab>"
        let g:UltiSnipsJumpBackwardTrigger = "<s-tab>"
        let g:UltiSnipsUsePythonVersion = 3
        let g:UltiSnipsEditSplit="vertical"
        let g:UltiSnipsSnippetDirectories = ['~/.config/nvim/UltiSnips', 'UltiSnips']
        let g:snips_author = 'Alexandros Weigl'
        if !exists("g:snips_company")
            let g:snips_company = 'TechDivison'
        endif
        if !exists("g:snips_username")
            let g:snips_username = 'AW3i'
        endif
endif
" Readline bindings
Plug 'tpope/vim-rsi'
Plug 'wellle/targets.vim'
" Star search
Plug 'pgdouyon/vim-evanesco'
Plug 'mbbill/undotree', {'on': 'UndotreeToggle'}
Plug 'tpope/vim-unimpaired'
Plug 'tpope/vim-eunuch'
Plug 'dansomething/vim-hackernews', {'on': 'HackerNews'}
Plug 'neomake/neomake'
    " Write function to search between project/ and src
    let g:neomake_php_phpcs_args_standard = 'src/vendor/magento/magento-coding-standard/Magento2/ruleset.xml'
    let g:neomake_php_enabled_makers = ['php', 'phpcs', 'phpmd']
    let g:neomake_javascript_enabled_makers = ['eslint']
    " autocmd FileType javascript set formatprg=prettier-eslint\ --stdin
    let g:neomake_place_signs = 1
    let g:neomake_logfile = "/tmp/neomake.log"
    let g:neomake_postprocess = 'neomake#postprocess#compress_whitespace'
Plug 'sbdchd/neoformat'
Plug 'justinmk/vim-sneak'
    let g:sneak#label = 1
Plug 'justinmk/vim-dirvish'
    augroup my_dirvish_events
      autocmd!
      " Map t to "open in new tab".
      autocmd FileType dirvish
        \  nnoremap <buffer> t :call dirvish#open('tabedit', 0)<CR>
        \ |xnoremap <buffer> t :call dirvish#open('tabedit', 0)<CR>

      " Enable :Gstatus and friends.
      autocmd FileType dirvish call FugitiveDetect(@%)

      " Map CTRL-R to reload the Dirvish buffer.
      autocmd FileType dirvish nnoremap <buffer> <C-R> :<C-U>Dirvish %<CR>

      " Map `gh` to hide dot-prefixed files.
      " To "toggle" this, just press `R` to reload.
      autocmd FileType dirvish nnoremap <buffer>
        \ gh :keeppatterns g@\v/\.[^\/]+/?$@d<cr>
    augroup END
Plug 'kassio/neoterm'
    let g:neoterm_default_mod = 'botright'
    let g:neoterm_automap_keys = '<leader>tm'
    let g:neoterm_use_relative_path = 1
    let g:neoterm_autoscroll = 1
    let g:neoterm_always_open_to_exec = 0
    let g:neoterm_repl_php = 'psysh'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'jesseleite/vim-agriculture'
nmap <Leader>/ <Plug>RgRawSearch
vmap <Leader>/ <Plug>RgRawVisualSelection
nmap <Leader>* <Plug>RgRawWordUnderCursor
Plug 'RishabhRD/popfix'
Plug 'RishabhRD/nvim-cheat.sh'
    " command! -bang -nargs=? -complete=dir Files
    "     \ call fzf#vim#files(<q-args>, fzf#vim#with_preview({'options': ['--layout=reverse', '--info=inline']}), <bang>0)
    " \ call fzf#vim#files(<q-args>, {'options': ['--layout=reverse', '--info=inline','--preview-window', 'down', '--preview', '~/.config/nvim/plugged/fzf.vim/bin/preview.sh {}']}, <bang>0)
    " command! -bang -nargs=* Rg call fzf#vim#grep('rg --column --line-number --no-heading --fixed-strings --ignore-case --no-ignore --hidden --follow --glob "!.git/*" --color "always" '.shellescape(<q-args>), 1, <bang>0 || true)
    " command! -bang -nargs=* Rgi
    "     \ call fzf#vim#grep(
    "     \       'rg --column --no-ignore --line-number --no-heading --color=always '.shellescape(<q-args>), 0,
    "     \       {'options': '--no-hscroll --delimiter : --nth 4..'},
    "     \       <bang>0)
Plug 'Konfekt/Fastfold'
    nmap zuz <Plug>(FastFoldUpdate)
    let g:fastfold_savehook = 1
    let g:fastfold_fold_command_suffixes =  ['x','X','a','A','o','O','c','C']
    let g:fastfold_fold_movement_commands = [']z', '[z', 'zj', 'zk']
    let g:markdown_folding = 1
    let g:tex_fold_enabled = 1
    let g:xml_syntax_folding = 2
    let g:javaScript_fold = 2
    let g:sh_fold_enabled= 7
    let g:php_folding = 1
    let g:elixir_folding = 2
    let g:org_folding = 1
Plug 'AndrewRadev/tagalong.vim'
    let g:tagalong_additional_filetypes = ['phtml', 'twig', 'dhtml']
Plug 'tommcdo/vim-exchange'
Plug 'mattn/emmet-vim'
Plug 'tpope/vim-dadbod'
Plug 'kristijanhusak/vim-dadbod-ui'
Plug 'itchyny/lightline.vim'
    let g:lightline = {
        \   'colorscheme': 'one',
        \   'active': {
        \     'left': [
        \       ['mode', 'paste'],
        \       ['fugitive', 'bufferinfo'],
        \     ],
        \     'right': [
        \       ['colinfo', 'percent'],
        \       ['fileformat', 'filetype'],
        \     ]
        \   },
        \   'inactive': {
        \     'left': [ ['bufferinfo'] ],
        \     'right': [ ['percent'], ['filetype'] ]
        \   },
        \   'tabline': {
        \     'left': [ ['tabs'], ['bufferline'] ],
        \     'right': [ ['fileencoding'] ]
        \   },
        \   'component': {
        \     'bufferinfo': '%<%f %m',
        \     'colinfo': ':%c%V',
        \     'fileencoding': '%{&fenc}',
        \     'readonly': '%{&readonly?"":""}',
        \     'paste': '%{&paste?"PASTE":""}',
        \   },
        \   'component_function': {
        \     'fileformat'  : 'MyFileformat',
        \     'filetype'    : 'MyFiletype',
        \     'fugitive'    : 'MyFugitive'
        \   },
        \   'separator': { 'left': '', 'right': '' },
        \   'subseparator': { 'left': '', 'right': '' },
        \ }

    let g:lightline.enable = {
        \   'statusline': 1,
        \   'tabline': 1
        \ }

    let g:lightline.mode_map = {
        \   'n'      : ' N ',
        \   'i'      : ' I ',
        \   'R'      : ' R ',
        \   'v'      : ' V ',
        \   'V'      : 'V-L',
        \   'c'      : ' C ',
        \   "\<C-v>" : 'V-B',
        \   's'      : ' S ',
        \   'S'      : 'S-L',
        \   "\<C-s>" : 'S-B',
        \   "t"      : ' T ',
        \   '?'      : ' ? '
        \ }

    function! MyFiletype()
    return strlen(&filetype) ? &filetype : '--'
    endfunction

    function! MyFileformat()
    return winwidth('.') > 80 ? &fileformat : ''
    endfunction

    function! MyFugitive()
    if exists('*fugitive#head') && winwidth('.') > 75
        let bmark = '┣ '
        let branch = fugitive#head()
        return strlen(branch) ? bmark . branch : ''
    endif
    return ''
    endfunction
Plug 'troydm/zoomwintab.vim'
Plug 'romainl/vim-qf'
Plug 'AndrewRadev/splitjoin.vim'
    let g:splitjoin_php_method_chain_full = 1
Plug 'moll/vim-bbye'
Plug 'psliwka/vim-smoothie'
"
Plug 'rakr/vim-one'
    let g:one_allow_italics = 1 
Plug 'tpope/vim-fugitive'
" VCS
Plug 'airblade/vim-gitgutter'
Plug 'dhruvasagar/vim-table-mode'
let g:table_mode_eval_formula_map = '<Leader>tfe'
let g:table_mode_map_prefix = '<leader>r'
Plug 'tpope/vim-fugitive'
" Languages
Plug 'liuchengxu/vista.vim'
" Wanted to test this sometime
" Plug 'tpope/vim-projectionist'
" Plug 'andyl/vim-projectionist-elixir'
Plug 'puremourning/vimspector'
    let g:vimspector_install_gadgets = [ 'vscode-php-debug']
    let g:vimspector_enable_mappings = 'HUMAN'
    " call vimspector#LaunchWithSettings(#{ configuration: 'Listen for XDebug'})
" nnoremap shift+F8 <Plug>VimspectorStepOut
" nnoremap ALT+SHIF+F9 <Plug>VimspectorRunToCursor

" Plug 'vim-vdebug/vdebug'
" if !exists('g:vdebug_options')
"     let g:vdebug_options = {}
" endif
"     let g:vdebug_options.break_on_open = 0
"     let g:vdebug_options['max_children'] = 128
"     let g:vdebug_options.ide_key = 'PHPSTORM'
Plug 'tpope/vim-obsession'
Plug 'dhruvasagar/vim-prosession'
    let g:prosession_default_session = 0
Plug 'sheerun/vim-polyglot'
    let g:polyglot_disabled = ['latex', 'csv']
Plug 'sgur/vim-editorconfig'
Plug 'andymass/vim-matchup'
" Plug 'lervag/vimtex', {'for': 'tex'}
if has('nvim')
    Plug 'neovim/nvim-lsp'
    Plug 'neovim/nvim-lspconfig'
    Plug 'nvim-lua/completion-nvim'
        let g:completion_enable_snippet = 'UltiSnips'
        let g:completion_matching_strategy_list = ['exact', 'substring', 'fuzzy']
        let g:completion_trigger_character = []
        let g:completion_enable_snippet = 'snippets.nvim'
        autocmd BufEnter * lua require'completion'.on_attach()
        autocmd FileType sql let g:completion_trigger_character = ['.', '"']
    Plug 'nvim-treesitter/nvim-treesitter'
    Plug 'nvim-treesitter/completion-treesitter'
    Plug 'norcalli/snippets.nvim'
    Plug 'RishabhRD/popfix'
    Plug 'RishabhRD/nvim-lsputils'
    let g:completion_chain_complete_list = {
            \ 'php' : {
            \   'default': [
            \       {'complete_items': ['lsp', 'snippet']},
            \       {'mode': '<c-p>'},
            \       {'mode': '<c-n>'}],
            \   },
            \   'sql': [
            \    {'complete_items': ['vim-dadbod-completion']},
            \   ],
            \  }
     let g:completion_trigger_character = ['*']
     let g:completion_matching_ignore_case = 1
     Plug 'kristijanhusak/vim-dadbod-completion'
     autocmd FileType sql setlocal omnifunc=vim_dadbod_completion#omni
endif
Plug 'mechatroner/rainbow_csv'
autocmd BufNewFile,BufRead *.csv set nowrap
Plug 'tobyS/pdv', {'for': 'php'} | Plug 'tobyS/vmustache', {'for': 'php'}
    let g:pdv_template_dir = $HOME . "/Documents/git/dotfiles/vim/plugged/pdv/templates_snip"
Plug 'phpactor/phpactor', {'branch': 'develop', 'for': 'php', 'do': 'composer install'}
" Plug 'swekaj/php-foldexpr.vim'
"     let b:phpfold_text_right_lines = 1
Plug 'iamcco/markdown-preview.nvim', { 'do': { -> mkdp#util#install() } }
    let g:mkdp_refresh_slow=1
    let g:mkdp_markdown_css='/usr/local/lib/node_modules/github-markdown-css/github-markdown.css'
Plug 'vim-test/vim-test'
  let g:test#strategy = 'neoterm'
  let g:test#php#phpunit#options = '--verbose -c phpunit.static.xml'
Plug 'plasticboy/vim-markdown'
    let g:vim_markdown_fenced_languages = ['c++=cpp', 'viml=vim', 'bash=sh', 'ini=dosini', 'php=php', 'json=json', 'js=javascript', 'css=css', 'less=less', 'html=html']
call plug#end()
" Full config: when writing or reading a buffer, and on changes in insert and
call neomake#configure#automake('nrwi', 500)

if (has("termguicolors"))
    set termguicolors
endif
" colorscheme hybrid_reverse
colorscheme one
" if strftime("%H") > 8 && strftime("%H") < 17
"   set background=light
" else
  set background=dark
" endif

nnoremap <silent> <leader>bd :Bdelete<CR>
nnoremap <silent> <leader>tn :tabnew<CR>
" Switch back to normal mode from terminal mode
if has('nvim')
    tnoremap <esc><esc> <C-\><C-n>
endif

command! -nargs=* Zet call ZettelEdit(<f-args>)
func! ZettelEdit(...)

  " build the file name
  let l:sep = ''
  if len(a:000) > 0
    let l:sep = '-'
  endif
  let l:fname = expand('~/wiki/') . strftime("%F-%H%M") . l:sep . join(a:000, '-') . '.md'

  " edit the new file
  exec "e " . l:fname

  " enter the title and timestamp (using ultisnips) in the new file
  if len(a:000) > 0
    exec "normal ggO\<c-r>=strftime('%Y-%m-%d %H:%M')\<cr> " . join(a:000) . "\<cr>\<esc>G"
  else
    exec "normal ggO\<c-r>=strftime('%Y-%m-%d %H:%M')\<cr>\<cr>\<esc>G"
  endif
endfunc

" Keep search results at the center of screen
nmap n nzz
nmap N Nzz
nmap * *zz
nmap # #zz
nmap g* g*zz
nmap g# g#zz

" Store relative line number jumps in the jumplist.
nnoremap <expr> k (v:count > 1 ? "m'" . v:count : '') . 'k'
nnoremap <expr> j (v:count > 1 ? "m'" . v:count : '') . 'j'

" sneak
"replace 'f' with 1-char Sneak
nmap f <Plug>Sneak_f
nmap F <Plug>Sneak_F
xmap f <Plug>Sneak_f
xmap F <Plug>Sneak_F
omap f <Plug>Sneak_f
omap F <Plug>Sneak_F
"replace 't' with 1-char Sneak
nmap t <Plug>Sneak_t
nmap T <Plug>Sneak_T
xmap t <Plug>Sneak_t
xmap T <Plug>Sneak_T
omap t <Plug>Sneak_t
omap T <Plug>Sneak_T
nmap <leader>lt <Plug>(qf_loc_toggle)
nmap <leader>qt <Plug>(qf_qf_toggle)

" neoterm
xmap <leader>tr <plug>(neoterm-repl-send)
nmap <leader>trl <plug>(neoterm-repl-send-line)

nnoremap <leader>tn :tabnew<CR>
nnoremap <leader>trn :TestNearest<CR>
nnoremap <leader>tf :TestFile<CR>
nnoremap <leader>tv :TestVisit<CR>
nnoremap <leader>tr :T 
nnoremap <leader>bmcc :T bin/magento cache:clean && bin/magento<CR>
" Rerun last command
nnoremap <silent> <leader>tR :<c-u>exec printf("%sTexec !! \<lt>cr>", v:count)<cr>
nnoremap <silent> <leader>tt :<c-u>exec printf('%sTtoggle', v:count)<cr>
nnoremap <silent> <leader>vt :<c-u>exec printf('botright vertical %s Ttoggle', v:count)<cr>
nnoremap <silent> <leader>te :<c-u>exec printf('%sT exit', v:count)<cr>
nnoremap <silent> <leader>tl :<c-u>exec printf('%sTclear', v:count)<cr>
nnoremap <silent> <leader>tk :<c-u>exec printf('%sTkill', v:count)<cr>

nnoremap <silent> <leader><space> :Files<CR>
nnoremap <silent> <leader>a :Buffers<CR>
nnoremap <silent> <leader>; :BLines<CR>
nnoremap <silent> <leader>. :Lines<CR>
" nnoremap <silent> <leader>o :BTags<CR>
nnoremap <silent> <leader>o :Vista finder<CR>
" nnoremap <silent> <leader>O :Tags<CR>
nnoremap <silent> <leader>h :History<CR>
" nnoremap <silent> <leader>, :execute 'Rgi ' . input('Rgi/')<CR>
" nnoremap <silent> <leader>/ :execute 'Rg ' . input('Rg/')<CR>
nnoremap <silent> <leader>gl :Commits<CR>
nnoremap <silent> <leader>ga :BCommits<CR>
nnoremap <silent> <leader>w :Windows<CR>
inoremap <silent> <C-s> <ESC>:Snippets<CR>
nnoremap <silent> <leader>xm :call FindClass()<CR>
imap <C-x><C-l> <plug>(fzf-complete-line)

" fugitive mappings
function! ToggleGStatus()
    if buflisted(bufname('.git/index'))
        bd .git/index
    else
        Gstatus
    endif
endfunction
" function! FindClass()
"     :execute "normal! gg/namespace\<cr>w\"nyt;"
"     :execute "normal! gg/^class\<cr>w\"cyiw"
"     let @n = substitute(@n, '\\', '\\\\', 'g')
"     let @n .= '\\' . @c
"     :execute 'Rg ' . @n
"     let @c = ''
" endfunction
command ToggleGStatus :call ToggleGStatus()
nnoremap <leader>ga :Gwrite<CR>
nnoremap <leader>gs :ToggleGStatus<CR>
nnoremap <leader>gd :Gdiff<CR>
nnoremap <leader>gc :Gcommit<CR>
nnoremap <leader>gb :Git branch<Space>

" Others
autocmd FileType php nnoremap <C-p> :call pdv#DocumentWithSnip()<CR>
nnoremap <silent> <F1>  :UndotreeToggle<CR>
nnoremap <silent> <F2>  :Vista!!<CR>
" Edit macro in cmdline window
nnoremap <leader>m  :<c-u><c-r><c-r>='let @'. v:register .' = '. string(getreg(v:register))<cr><c-f><left>
cnoremap <c-n>  <down>
cnoremap <c-p>  <up>

" Include use statement
autocmd FileType php nmap <Leader>u :call phpactor#UseAdd()<CR>
" Invoke the context menu
autocmd FileType php nmap <Leader>mm :call phpactor#ContextMenu()<CR>
" Goto definition of class or class member under the cursor
autocmd FileType php nmap <Leader>oo :call phpactor#GotoDefinition()<CR>
autocmd FileType php nmap <Leader>oh :call phpactor#GotoDefinitionHsplit()<CR>
autocmd FileType php nmap <Leader>ov :call phpactor#GotoDefinitionVsplit()<CR>
autocmd FileType php nmap <Leader>ot :call phpactor#GotoDefinitionTab()<CR>
autocmd FileType php nmap <Leader>na :call phpactor#Navigate()<CR>
" Transform the classes in the current file
autocmd FileType php nmap <Leader>pt :call phpactor#Transform()<CR>
" Display information
autocmd FileType php nmap <Leader>h :call phpactor#Hover()<CR>
" Generate a new class (replacing the current file)
autocmd FileType php nmap <Leader>cc :call phpactor#ClassNew()<CR>
" Extract expressoins
autocmd FileType php nmap <Leader>ee :call phpactor#ExtractExpression(v:false)<CR>
autocmd FileType php vmap <silent><Leader>em :<C-U>call phpactor#ExtractExpression(v:true)<CR>
"Extract interface
autocmd FileType php nmap <Leader>ei :call phpactor#ClassInflect()<CR>
autocmd FileType php nmap <Leader>fr :call phpactor#FindReferences()<CR>
" Extract method from selection
autocmd FileType php vmap <silent><Leader>em :<C-U>call phpactor#ExtractMethod()<CR>
autocmd BufRead,BufNewFile .git/NOTES_EDITMSG set filetype=gitnotes

function! PhpSyntaxOverride()
  hi! def link phpDocTags  phpDefine
  hi! def link phpDocParam phpType
endfunction

augroup phpSyntaxOverride
  autocmd!
  autocmd FileType php call PhpSyntaxOverride()
augroup END
autocmd BufWritePost *.exs,*.ex silent :!mix format %
autocmd BufNewFile,BufRead *.phtml setf php
autocmd BufNewFile,BufRead *.dhtml setf php
autocmd FileType mail set spell
" Check how to fire the event correctly but onyl for classes without the
" variables parts etc temporarily making a keybinding
" autocmd CompleteDone php call AddUsages()
        " licenceKey = get_pass("Software/Intelephense");

lua << EOF
require'nvim-treesitter.configs'.setup {
  ensure_installed = "all",     -- one of "all", "language", or a list of languages
  indent = {
    enable = true
  },
  highlight = {
    enable = true,              -- false will disable the whole extension
    disable = { "c", "rust" },  -- list of language that will be disabled
  },
  incremental_selection = {
     enable = true,
     keymaps = {
       init_selection = "gnn",
       node_incremental = "grn",
       scope_incremental = "grc",
       node_decremental = "grm",
     },
  },
  textobjects = { enable = true },
}
local nvim_lsp = require 'lspconfig';

local function get_pass(key) 
    local handle = io.popen("pass show " .. key);
    local result = handle:read("*l");
    handle:close();

    return vim.trim(result);
end

nvim_lsp.intelephense.setup({
    init_options = {
        licenceKey = "00OLK3E08UVDLEI"
    };
    settings = {
        intelephense = {
            files = {
                maxSize = 5000000;
            };
            diagnostics = {
              undefinedTypes = false;
            };
        };
    };
});

nvim_lsp.sumneko_lua.setup({});
nvim_lsp.tsserver.setup({});
vim.lsp.handlers['textDocument/codeAction'] = require'lsputil.codeAction'.code_action_handler
vim.lsp.handlers['textDocument/references'] = require'lsputil.locations'.references_handler
vim.lsp.handlers['textDocument/definition'] = require'lsputil.locations'.definition_handler
vim.lsp.handlers['textDocument/declaration'] = require'lsputil.locations'.declaration_handler
vim.lsp.handlers['textDocument/typeDefinition'] = require'lsputil.locations'.typeDefinition_handler
vim.lsp.handlers['textDocument/implementation'] = require'lsputil.locations'.implementation_handler
vim.lsp.handlers['textDocument/documentSymbol'] = require'lsputil.symbols'.document_handler
vim.lsp.handlers['workspace/symbol'] = require'lsputil.symbols'.workspace_handler
EOF

" autocmd Filetype javascript setlocal omnifunc=v:lua.vim.lsp.omnifunc
autocmd Filetype php,javascript,typescript,tsx,phtml setlocal omnifunc=v:lua.vim.lsp.omnifunc
" autocmd FileType php setlocal foldmethod=expr
"
nnoremap <silent> gd    <cmd>lua vim.lsp.buf.declaration()<CR>
nnoremap <silent> <c-]> <cmd>lua vim.lsp.buf.definition()<CR>
nnoremap <silent> K     <cmd>lua vim.lsp.buf.hover()<CR>
nnoremap <silent> gD    <cmd>lua vim.lsp.buf.implementation()<CR>
nnoremap <silent> <c-k> <cmd>lua vim.lsp.buf.signature_help()<CR>
nnoremap <silent> 1gD   <cmd>lua vim.lsp.buf.type_definition()<CR>
nnoremap <silent> gr    <cmd>lua vim.lsp.buf.references()<CR>
nnoremap <silent> g0    <cmd>lua vim.lsp.buf.document_symbol()<CR>
nnoremap <silent> <leader>rn <cmd>lua vim.lsp.buf.rename()<CR>
" nnoremap <silent> <leader>ph  <cmd>lua vim.lsp.buf.peek_definition()<CR>
nnoremap <silent> <leader>ff  <cmd>lua vim.lsp.buf.formatting()<CR>
nnoremap <silent> <leader>ca  <cmd>lua vim.lsp.buf.code_action()<CR>

let $GIT_EDITOR = 'nvr -cc split --remote-wait'
autocmd FileType gitcommit,gitrebase,gitconfig,gitnotes set bufhidden=delete
"format xml
au FileType xml setlocal equalprg=xmllint\ --format\ --recover\ -\ 2>/dev/null
nnoremap ' `
nnoremap Y y$
augroup html_pairs
    autocmd!
    autocmd FileType html let b:pear_tree_pairs = {
                \'<*>': {'closer': '</*>'}
                \ }
augroup END

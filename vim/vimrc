set nocompatible
set backspace=indent,eol,start
set history=1000
set showcmd
set showmode
set incsearch
set hlsearch
set wrap
set linebreak
set laststatus=2

set smartindent
set tabstop=4
set shiftwidth=4
set expandtab
set shiftround
set textwidth=80
set matchpairs+=<:>

set foldmethod=indent
set foldnestmax=3
set nofoldenable

set scrolloff=3
set sidescrolloff=7
set sidescroll=1

syntax on
set showmatch
set hidden
set noautowrite
set autoread
set more
set ruler
set ttyfast
set noshowmode
set nostartofline
set wildmenu
set lazyredraw
set shell=zsh
set number
set relativenumber
set iskeyword+=_,$,@,%,#
set splitbelow
set splitright
set undolevels=500
set timeout timeoutlen=1000 ttimeoutlen=100
set list listchars=tab:»-,trail:·,extends:»,precedes:«
set encoding=utf-8
scriptencoding utf-8
set omnifunc=syntaxcomplete#Complete

colorscheme apprentice

filetype plugin indent  on
filetype off

call plug#begin('~/.vim/plugged')
Plug 'scrooloose/nerdtree', {'on': 'NERDTreeToggle'}
Plug 'scrooloose/syntastic'
Plug 'mhinz/vim-signify'
Plug 'majutsushi/tagbar'
Plug 'Raimondi/delimitMate'
Plug 'kien/ctrlp.vim'
Plug 'bling/vim-airline'
Plug 'fatih/vim-go', {'for': 'go'}
Plug 'SirVer/UltiSnips'
Plug 'c9s/perlomni.vim', {'for': 'perl'}
Plug 'tpope/vim-surround'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-fugitive'
Plug 'AW3i/aftersyntaxc.vim'
Plug 'tommcdo/vim-exchange'
Plug 'bronson/vim-visual-star-search'
Plug 'honza/vim-snippets'
Plug 'vim-pandoc/vim-pandoc',
Plug 'vim-pandoc/vim-pandoc-syntax'
Plug 'scrooloose/nerdcommenter'
Plug 'Valloric/YouCompleteMe', {'do': './install.sh --system-libclang --clang-completer'}
Plug 'sjl/gundo.vim', {'on': 'GundoToggle'}
Plug 'vim-scripts/a.vim', {'for': 'c'}
Plug 'joequery/Stupid-EasyMotion'
Plug 'pangloss/vim-javascript'
Plug 'othree/javascript-libraries-syntax.vim'
Plug 'matthewsimo/angular-vim-snippets'
call plug#end()

"Highlight in red when a line has more than 81 characters
highlight ColorColumn ctermbg=red
call matchadd('ColorColumn', '\%81v', 100)

function s:MDSettings()
    inoremap <buffer> <Leader>n \note[item]{}<Esc>i
    noremap <buffer> <Leader>b :! pandoc -t beamer % -o %<.pdf<CR>
    noremap <buffer> <Leader>l :! pandoc --toc --include-in-header titlesec.tex -t latex % -o %<.pdf --latex-engine=xelatex --variable mainfont="DejaVu Serif"<CR>
    noremap <buffer> <Leader>v :! zathura %<.pdf 2>&1 >/dev/null &<CR>

    " adjust syntax highlighting for LaTeX parts
    "   inline formulas:
    syntax region Statement oneline matchgroup=Delimiter start="\$" end="\$"
    "   environments:
    syntax region Statement matchgroup=Delimiter start="\\begin{.*}" end="\\end{.*}" contains=Statement
    "   commands:
    syntax region Statement matchgroup=Delimiter start="{" end="}" contains=Statement
endfunction

autocmd BufRead,BufNewFile *.md setfiletype markdown
autocmd FileType markdown :call <SID>MDSettings()

let mapleader = ","

noremap v   <C-V>
noremap <C-V>   v
vnoremap v   <C-V>
vnoremap <C-V>   v

nmap <leader>r :reg<CR>
nmap <silent> <leader>h :nohls<CR>
nmap <leader>y "+y

nmap <silent> gn :bnext<CR>
nmap <silent> gN :bprevious<CR>
nmap <silent> gc :bp<bar>sp<bar>bn<bar>bd<CR>
nmap <silent> gf <C-^>
nmap <silent> gb :ls<CR>:b<Space>

nnoremap <silent> <C-k> :wincmd k<CR>
nnoremap <silent> <C-j> :wincmd j<CR>
nnoremap <silent> <C-h> :wincmd h<CR>
nnoremap <silent> <C-l> :wincmd l<CR>

nmap <silent> <F1>  :TagbarToggle<CR>
nmap <silent> <F2>  :GundoToggle<CR>
nmap <silent> <F3>  :NERDTreeToggle<CR>
nmap <silent> <F4>  :!gcc -std=c99 % && ./a.out<CR>
nmap <silent> <F5>  :!perl %<CR>
nmap <silent> <F6>  :GoRun<CR>
nmap <silent> <F7>  :!javac % && java %:r<CR>
nmap   Q gq<CR>

cnoreabbrev csa cs add
cnoreabbrev csf cs find
cnoreabbrev csk cs kill
cnoreabbrev csr cs reset
cnoreabbrev css cs show
cnoreabbrev csh cs help

" Use <leader>t to open ctrlp
let g:ctrlp_map = '<leader>t'

" Ignore these directories
set wildignore+=*/build/**
" disable caching
let g:ctrlp_use_caching=0

let delimitMate_matchpairs = "(:),[:],{:}"
let delimitMate_jump_expansion = 1
let delimitMate_expand_cr = 1

let g:tex_flavor='latex'
let g:Tex_DefaultTargetFormat = 'pdf'
let g:tex_MultipleCompileFormats = 'pdf,aux'

let g:UltiSnipsExpandTrigger="<C-j>"
let g:UltiSnipsJumpForwardTrigger="<C-n>"
let g:UltiSnipsJumpBackwardTrigger="<C-b>"
let g:UltiSnipsUsePythonVersion = 2
"
let g:UltiSnipsEditSplit="vertical"

let g:ycm_global_ycm_extra_conf = '~/.ycm_extra_conf.py'  "where to search for .ycm_extra_conf.py if not found
let g:ycm_confirm_extra_conf = 0
let g:ycm_key_invoke_completion = '<C-Space>'
let g:ycm_use_ultisnips_completer = 1

let g:syntastic_always_populate_loc_list = 1
let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline_detect_modified=1
let g:airline_theme="tomorrow"

" Only do this part when compiled with support for autocommands.
if has("autocmd")
  autocmd Filetype java setlocal omnifunc=javacomplete#Complete
endif "
setlocal completefunc=javacomplete#CompleteParamsInfo
let java_highlight_java_lang_ids=1
let java_highlight_java_io=1
let java_highlight_functions="style"

